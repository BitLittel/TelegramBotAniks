# -*- coding: utf-8 -*-

import asyncio
import re
from sqlalchemy import and_
from database import Users, Vacancies, Questions, Citys, Responses, Session
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
import keyboard as kb

db = Session()  # —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
API_TOKEN = '' # add here your api token telegram bot
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


def check_city(city: str) -> bool:
    check = db.query(Citys).filter(Citys.name_city == city.upper()).first()
    return check is not None


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—à–µ–π —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class FormRegistration(StatesGroup):
    FIO = State()
    serial_and_number_pass = State()
    city = State()
    tel_number = State()


help_text = "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:\n" \
            "<b>/help</b> - –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n" \
            "<b>/start</b> - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n" \
            "<b>/cancel</b> - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"


@dp.message_handler(commands='help')
async def help_message(message: types.Message):
    await bot.send_message(message.from_id, help_text, parse_mode=ParseMode.HTML)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    get_user = db.query(Users).filter(Users.id_telegram == message.from_id).first()
    if get_user is None:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await FormRegistration.FIO.set()
        await message.reply("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n"
                            "–Ø –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ –ê–Ω–∏–∫—Å–µ.\n"
                            "–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è\n"
                            "–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ\n"
                            "–ü—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b>\n"
                            "<i>–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç <u>–æ—Ç—á–µ—Å—Ç–≤–∞</u>, —Ç–æ –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ –¥–ª—è –≤–∞—Å</i>\n"
                            "–ü—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω -</b>",
                            parse_mode=ParseMode.HTML)
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º", reply_markup=kb.markup)


# –ï—Å–ª–∏ –§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –≥–æ–≤–æ—Ä–∏–º —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –æ—à–∏–±—Å—è
@dp.message_handler(lambda message: re.search(r"^([–∞-—è–ê-–Ø]+) ([–∞-—è–ê-–Ø]+) (([–∞-—è–ê-–Ø]+)|(-))$",  message.text) is None,
                    state=FormRegistration.FIO)
async def process_FIO_invalid(message: types.Message):
    return await message.reply("–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ.\n"
                               "–ü—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b> –∏–ª–∏ <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω -</b>",
                               parse_mode=ParseMode.HTML)


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤–µ—Ä–Ω–æ –§–ò–û —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—é
@dp.message_handler(lambda message: re.search(r"^([–∞-—è–ê-–Ø]+) ([–∞-—è–ê-–Ø]+) (([–∞-—è–ê-–Ø]+)|(-))$", message.text) is not None,
                    state=FormRegistration.FIO)
async def process_FIO(message: types.Message, state: FSMContext):
    await state.update_data(FIO=message.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤ –Ω–∞—à—å –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await FormRegistration.next()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
    await message.reply("–•–æ—Ä–æ—à–æ.\n"
                        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
                        "–ü—Ä–∏–º–µ—Ä: <b>1234 567890</b>", parse_mode=ParseMode.HTML)


# —Ç—É—Ç —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –≤—ã—à–µ, –Ω–æ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–º –Ω–∞ –≤–≤–æ–¥ —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
@dp.message_handler(lambda message: re.search(r"^(\d{4}) (\d{6})$", message.text) is None,
                    state=FormRegistration.serial_and_number_pass)
async def process_serial_and_number_pass_invalid(message: types.Message):
    return await message.reply("–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ.\n"
                               "–ü—Ä–∏–º–µ—Ä: <b>1234 567890</b>",
                               parse_mode=ParseMode.HTML)


# –µ—Å–ª–∏ —Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–¥—ë–º –∫ —Å–ª–µ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—é
@dp.message_handler(lambda message: re.search(r"(\d{4}) (\d{6})$", message.text) is not None,
                    state=FormRegistration.serial_and_number_pass)
async def process_serial_and_number_pass(message: types.Message, state: FSMContext):
    await FormRegistration.next()
    await state.update_data(serial_and_number_pass=message.text)
    await message.reply("–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞")


@dp.message_handler(lambda message: check_city(message.text) is False, state=FormRegistration.city)
async def process_city_invalid(message: types.Message):
    await message.reply("–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@dp.message_handler(lambda message: check_city(message.text) is True, state=FormRegistration.city)
async def process_city(message: types.Message, state: FSMContext):
    await FormRegistration.next()
    await state.update_data(city=message.text)
    await message.reply("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ.\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                        "–ü—Ä–∏–º–µ—Ä: <b>+71234567890</b> –∏–ª–∏ <b>81234567890</b>",
                        parse_mode=ParseMode.HTML)


@dp.message_handler(lambda message: re.search(r"^(([+]\d{1,3})\d{10})|(8+\d{10})$", message.text) is None,
                    state=FormRegistration.tel_number)
async def process_tel_number_invalid(message: types.Message):
    return await message.reply("–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥—ë–Ω –Ω–µ –≤–µ—Ä–Ω–æ\n"
                               "–ü—Ä–∏–º–µ—Ä: <b>+71234567890</b> –∏–ª–∏ <b>81234567890</b>",
                               parse_mode=ParseMode.HTML)


@dp.message_handler(lambda message: re.search(r"^(([+]\d{1,3})\d{10})|(8+\d{10})$", message.text) is not None,
                    state=FormRegistration.tel_number)
async def process_tel_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tel_number'] = message.text

        new_user = Users(id_telegram=message.from_id, FIO=data['FIO'],
                         serial_and_number_pass=data['serial_and_number_pass'], city=data['city'].upper(),
                         tel_number=data['tel_number'])
        db.add(new_user)
        db.commit()

        await bot.send_message(message.chat.id,
                               "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                               "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π",
                               reply_markup=kb.markup)
    await state.finish()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(Text(equals=kb.text_btn1))
async def show_vacantions(message: types.Message):

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    get_user = db.query(Users).filter(Users.id_telegram == message.from_id).first()
    get_vacansions = db.query(Vacancies).filter(and_(Vacancies.city == get_user.city)).all()

    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if get_vacansions:
        for i in get_vacansions:

            text_message = f"<b>–í–∞–∫–∞–Ω—Å–∏—è ‚Ññ{i.id}</b>\n" \
                           f"<b>–ì–æ—Ä–æ–¥:</b> {i.city}\n" \
                           f"<b>–ê–¥—Ä–µ—Å:</b> {i.address}\n" \
                           f"<b>–í—Ä–µ–º—è:</b> –æ—Ç {i.dateFrom} - –¥–æ {i.dateTo}\n" \
                           f"<b>–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</b> {i.type_vacancies}\n" \
                           f"<b>–û –≤–∞–∫–∞–Ω—Å–∏–∏:</b> {i.about}\n" \
                           f"<b>–¶–µ–Ω–∞:</b> {i.price} —Ä—É–±. üíµ"

            await bot.send_message(message.from_id, text_message, reply_markup=kb.inline_keyboard_for_vacantion(i.id),
                                   parse_mode=ParseMode.HTML)
            await asyncio.sleep(.05)
            # –∑–∞–¥–µ—Ä–∂–∫—É –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–æ–¥–æ—Å –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–æ–¥–µ –º–∞–∫—Å–∏–º—É–º 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫, –Ω–æ —É –Ω–∞—Å 20 –≤ —Å–µ–∫
    # –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç
    else:
        await bot.send_message(message.from_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç üò¢")


# –µ—Å–ª–∏ —É –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn1'))
async def process_callback_btn1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    get_user = db.query(Users).filter(Users.id_telegram == callback_query.from_user.id).first()
    get_vacantion = db.query(Vacancies).filter(Vacancies.id == int(callback_query.data.split('_')[1])).first()

    get_response = db.query(Responses).filter(and_(
        Responses.id_telegram_user == get_user.id_telegram,
        Responses.id_vacancies == get_vacantion.id
    )).first()

    if get_response is not None:
        await bot.send_message(callback_query.from_user.id,
                               "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é üòå")
    else:
        new_response = Responses(response_user=get_user, responses_vacancie=get_vacantion)
        db.add(new_response)
        db.commit()
        await bot.send_message(callback_query.from_user.id,
                               "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å üòä\n"
                               "–° –≤–∞–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Å–≤—è–∂—É—Ç—Å—è")


class FormQuestion(StatesGroup):
    vacancie_id = State()
    question = State()


# –µ—Å–ª–∏ —É –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn2'))
async def process_callback_btn2(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    id_vacantion = callback_query.data.split('_')[1]

    await FormQuestion.vacancie_id.set()
    await state.update_data(vacancie_id=int(id_vacantion))
    await FormQuestion.next()
    await bot.send_message(callback_query.from_user.id,
                           f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Ññ{id_vacantion}")


@dp.message_handler(state=FormQuestion.question)
async def process_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:

        get_vacantion = db.query(Vacancies).filter(Vacancies.id == int(data['vacancie_id'])).first()
        get_user = db.query(Users).filter(Users.id_telegram == message.from_user.id).first()

        data['question'] = message.text

        new_question = Questions(question_user=get_user, question_vacancie=get_vacantion, question=data['question'])
        db.add(new_question)
        db.commit()

        await bot.send_message(message.chat.id,
                               "–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                               "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥—ë—Ç")
    await state.finish()


